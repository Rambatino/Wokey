// Code generated by MockGen. DO NOT EDIT.
// Source: database/github.go

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGithubQuerier is a mock of GithubQuerier interface
type MockGithubQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockGithubQuerierMockRecorder
}

// MockGithubQuerierMockRecorder is the mock recorder for MockGithubQuerier
type MockGithubQuerierMockRecorder struct {
	mock *MockGithubQuerier
}

// NewMockGithubQuerier creates a new mock instance
func NewMockGithubQuerier(ctrl *gomock.Controller) *MockGithubQuerier {
	mock := &MockGithubQuerier{ctrl: ctrl}
	mock.recorder = &MockGithubQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubQuerier) EXPECT() *MockGithubQuerierMockRecorder {
	return m.recorder
}

// getGithubPullRequests mocks base method
func (m *MockGithubQuerier) getGithubPullRequests() []pullRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getGithubPullRequests")
	ret0, _ := ret[0].([]pullRequest)
	return ret0
}

// getGithubPullRequests indicates an expected call of getGithubPullRequests
func (mr *MockGithubQuerierMockRecorder) getGithubPullRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getGithubPullRequests", reflect.TypeOf((*MockGithubQuerier)(nil).getGithubPullRequests))
}
